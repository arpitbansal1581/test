pip install pandas plotly fastapi uvicorn streamlit openpyxl


chart_utils
import pandas as pd
import plotly.express as px

def load_data(file_path="data.xlsx"):
    return pd.read_excel(file_path)

def generate_region_bar_chart(df):
    region_counts = df.groupby("region")["regid"].count().reset_index()
    fig = px.bar(region_counts, x="region", y="regid", color="region",
                 title="RegID Count per Region", text="regid")
    return fig

def generate_division_bar_chart(df):
    division_counts = df.groupby("division")["regid"].count().reset_index()
    fig = px.bar(division_counts, x="division", y="regid", color="division",
                 title="RegID Count per Division", text="regid")
    return fig

def generate_priority_pie_chart(df):
    priority_counts = df['priority'].value_counts().reset_index()
    priority_counts.columns = ['priority', 'count']
    fig = px.pie(priority_counts, names="priority", values="count", hole=0.4,
                 title="RegID Distribution by Priority")
    return fig

def generate_division_histogram(df):
    fig = px.histogram(df, x="division", color="division",
                       title="Histogram of RegIDs by Division")
    return fig




app.py 
from fastapi import FastAPI
from fastapi.responses import HTMLResponse
from chart_utils import load_data, generate_region_bar_chart, generate_division_bar_chart, generate_priority_pie_chart, generate_division_histogram

app = FastAPI(title="Interactive Chart API")

@app.get("/", response_class=HTMLResponse)
async def root():
    return "<h2>‚úÖ API is Live. Use /chart/{type} to view charts (region/division/pie/histogram)</h2>"

@app.get("/chart/{chart_type}", response_class=HTMLResponse)
async def get_chart(chart_type: str):
    df = load_data()
    fig = None

    if chart_type == "region":
        fig = generate_region_bar_chart(df)
    elif chart_type == "division":
        fig = generate_division_bar_chart(df)
    elif chart_type == "pie":
        fig = generate_priority_pie_chart(df)
    elif chart_type == "histogram":
        fig = generate_division_histogram(df)
    else:
        return HTMLResponse(content=f"<h3>‚ùå Unknown chart type: {chart_type}</h3>", status_code=400)

    return fig.to_html(full_html=False, include_plotlyjs='cdn')



dahsboard.py 
import streamlit as st
from chart_utils import load_data, generate_region_bar_chart, generate_division_bar_chart, generate_priority_pie_chart, generate_division_histogram

st.set_page_config(layout="wide", page_title="üìä RegID Charts")

df = load_data()
st.title("üìä Interactive RegID Dashboard")

chart_type = st.selectbox("Choose a chart type", ["Region Bar", "Division Bar", "Priority Pie", "Division Histogram"])

if chart_type == "Region Bar":
    fig = generate_region_bar_chart(df)
elif chart_type == "Division Bar":
    fig = generate_division_bar_chart(df)
elif chart_type == "Priority Pie":
    fig = generate_priority_pie_chart(df)
elif chart_type == "Division Histogram":
    fig = generate_division_histogram(df)

st.plotly_chart(fig, use_container_width=True)

with st.expander("üìÑ View Raw Data"):
    st.dataframe(df)




gantt
ap.py
streamlit run app.py

import streamlit as st
import pandas as pd
import plotly.express as px

# Set page settings
st.set_page_config(page_title="Gantt Chart", layout="wide")
st.title("üìä Gantt Chart Viewer")

# File path (local)
EXCEL_FILE_PATH = "project_timeline.xlsx"  # <- Change to your file name/path

try:
    # Load data
    df = pd.read_excel(EXCEL_FILE_PATH)

    # Convert date columns
    df["StartDate"] = pd.to_datetime(df["StartDate"])
    df["EndDate"] = pd.to_datetime(df["EndDate"])

    # Optional filter by Owner
    if "Owner" in df.columns:
        owners = st.multiselect("Filter by Owner", options=df["Owner"].unique(), default=df["Owner"].unique())
        df = df[df["Owner"].isin(owners)]

    # Create Gantt chart
    fig = px.timeline(df, x_start="StartDate", x_end="EndDate", y="Task", color="Owner" if "Owner" in df.columns else None,
                      title="Project Timeline Gantt Chart")
    fig.update_yaxes(autorange="reversed")  # Tasks top to bottom

    # Show chart
    st.plotly_chart(fig, use_container_width=True)

except Exception as e:
    st.error(f"Failed to load Gantt chart: {e}")

